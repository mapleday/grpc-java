From 326225afacb48d378d5d1eeb4d00fdbeab6ec52b Mon Sep 17 00:00:00 2001
From: weishibai <weishibai@kuaishou.com>
Date: Sat, 5 Oct 2019 11:49:29 +0800
Subject: [PATCH 1/4] Revert "compiler: Remove enable_depreated option (#3541)"

This reverts commit dba2323585061f8634e37de7c757330826567a9d.
---
 build.gradle                                  |  13 ++
 .../src/java_plugin/cpp/java_generator.cpp    | 124 +++++++++++++++---
 compiler/src/java_plugin/cpp/java_generator.h |   1 +
 compiler/src/java_plugin/cpp/java_plugin.cpp  |   5 +-
 examples/build.gradle                         | 106 ++++++++-------
 5 files changed, 183 insertions(+), 66 deletions(-)

diff --git a/build.gradle b/build.gradle
index 2b89337dc..2462d4bdf 100644
--- a/build.gradle
+++ b/build.gradle
@@ -126,9 +126,22 @@ subprojects {
                 }
                 generateProtoTasks {
                     all().each { task ->
+                        task.dependsOn ':grpc-compiler:java_pluginExecutable'
+                        // Delete the generated sources first, so that we can be alerted if they are not re-compiled.
+                        task.dependsOn 'deleteGeneratedSource' + task.sourceSet.name
+                        // Recompile protos when the codegen has been changed
+                        task.inputs.file javaPluginPath
                         // Recompile protos when build.gradle has been changed, because
                         // it's possible the version of protoc has been changed.
                         task.inputs.file "${rootProject.projectDir}/build.gradle"
+                        task.plugins {
+                            grpc {
+                                // To generate deprecated interfaces and static bindService method,
+                                // turn the enable_deprecated option to true below:
+                                option 'enable_deprecated=false'
+                                option 'noversion'
+                            }
+                        }
                     }
                 }
             }
diff --git a/compiler/src/java_plugin/cpp/java_generator.cpp b/compiler/src/java_plugin/cpp/java_generator.cpp
index 8110f3d55..11da9e93b 100644
--- a/compiler/src/java_plugin/cpp/java_generator.cpp
+++ b/compiler/src/java_plugin/cpp/java_generator.cpp
@@ -458,11 +458,43 @@ static void PrintBindServiceMethodBody(const ServiceDescriptor* service,
                                    std::map<string, string>* vars,
                                    Printer* p);
 
+static void PrintDeprecatedDocComment(const ServiceDescriptor* service,
+                                      std::map<string, string>* vars,
+                                      Printer* p) {
+  p->Print(
+      *vars,
+      "/**\n"
+      " * This will be removed in the next release.\n"
+      " * If your code has been using gRPC-java v0.15.0 or higher already,\n"
+      " * the following changes to your code are suggested:\n"
+      " * <ul>\n"
+      " *   <li> replace {@code extends/implements $service_name$}"
+      " with {@code extends $service_name$ImplBase} for server side;</li>\n"
+      " *   <li> replace {@code $service_name$} with {@code $service_name$Stub} for client side;"
+      "</li>\n"
+      " *   <li> replace usage of {@code $service_name$} with {@code $service_name$ImplBase};"
+      "</li>\n"
+      " *   <li> replace usage of {@code Abstract$service_name$}"
+      " with {@link $service_name$ImplBase};</li>\n"
+      " *   <li> replace"
+      " {@code serverBuilder.addService($service_class_name$.bindService(serviceImpl))}\n"
+      " *        with {@code serverBuilder.addService(serviceImpl)};</li>\n"
+      " *   <li> if you are mocking stubs using mockito, please do not mock them.\n"
+      " *        See the documentation on testing with gRPC-java;</li>\n"
+      " *   <li> replace {@code $service_name$BlockingClient}"
+      " with {@link $service_name$BlockingStub};</li>\n"
+      " *   <li> replace {@code $service_name$FutureClient}"
+      " with {@link $service_name$FutureStub}.</li>\n"
+      " * </ul>\n"
+      " */\n");
+}
+
 // Prints a client interface or implementation class, or a server interface.
 static void PrintStub(
     const ServiceDescriptor* service,
     std::map<string, string>* vars,
-    Printer* p, StubType type) {
+    Printer* p, StubType type, bool generate_nano,
+    bool enable_deprecated) {
   const string service_name = service->name();
   (*vars)["service_name"] = service_name;
   (*vars)["abstract_name"] = service_name + "ImplBase";
@@ -516,13 +548,34 @@ static void PrintStub(
   }
 
   if (impl_base) {
-    p->Print(
-        *vars,
-        "public static abstract class $abstract_name$ implements $BindableService$ {\n");
+    if (enable_deprecated) {
+      p->Print(
+          *vars,
+          "public static abstract class $abstract_name$ implements $BindableService$, "
+          "$service_name$ {\n");
+    }
+    else {
+      p->Print(
+          *vars,
+          "public static abstract class $abstract_name$ implements $BindableService$ {\n");
+    }
   } else {
-    p->Print(
-        *vars,
-        "public static final class $stub_name$ extends $AbstractStub$<$stub_name$> {\n");
+    if (enable_deprecated) {
+      if (interface) {
+        p->Print(
+            *vars,
+            "@$Deprecated$ public static interface $client_name$ {\n");
+      } else {
+        p->Print(
+            *vars,
+            "public static class $stub_name$ extends $AbstractStub$<$stub_name$>\n"
+            "    implements $client_name$ {\n");
+      }
+    } else {
+      p->Print(
+          *vars,
+          "public static final class $stub_name$ extends $AbstractStub$<$stub_name$> {\n");
+    }
   }
   p->Indent();
 
@@ -581,6 +634,11 @@ static void PrintStub(
     // TODO(nmittler): Replace with WriteMethodDocComment once included by the protobuf distro.
     if (!interface) {
       GrpcWriteMethodDocComment(p, method);
+      if (enable_deprecated) {
+        p->Print(
+            *vars,
+            "@$Override$\n");
+      }
     }
 
     if (method->options().deprecated()) {
@@ -739,7 +797,9 @@ static bool CompareMethodClientStreaming(const MethodDescriptor* method1,
 // on Android.
 static void PrintMethodHandlerClass(const ServiceDescriptor* service,
                                    std::map<string, string>* vars,
-                                   Printer* p) {
+                                   Printer* p,
+                                   bool generate_nano,
+                                   bool enable_deprecated) {
   // Sort method ids based on client_streaming() so switch tables are compact.
   std::vector<const MethodDescriptor*> sorted_methods(service->method_count());
   for (int i = 0; i < service->method_count(); ++i) {
@@ -756,7 +816,11 @@ static void PrintMethodHandlerClass(const ServiceDescriptor* service,
         "private static final int $method_id_name$ = $method_id$;\n");
   }
   p->Print("\n");
-  (*vars)["service_name"] = service->name() + "ImplBase";
+  if (enable_deprecated) {
+    (*vars)["service_name"] = service->name();
+  } else {
+    (*vars)["service_name"] = service->name() + "ImplBase";
+  }
   p->Print(
       *vars,
       "private static final class MethodHandlers<Req, Resp> implements\n"
@@ -1002,6 +1066,7 @@ static void PrintService(const ServiceDescriptor* service,
                          std::map<string, string>* vars,
                          Printer* p,
                          ProtoFlavor flavor,
+                         bool enable_deprecated,
                          bool disable_version) {
   (*vars)["service_name"] = service->name();
   (*vars)["file_name"] = service->file()->name();
@@ -1079,12 +1144,39 @@ static void PrintService(const ServiceDescriptor* service,
   p->Outdent();
   p->Print("}\n\n");
 
-  PrintStub(service, vars, p, ABSTRACT_CLASS);
-  PrintStub(service, vars, p, ASYNC_CLIENT_IMPL);
-  PrintStub(service, vars, p, BLOCKING_CLIENT_IMPL);
-  PrintStub(service, vars, p, FUTURE_CLIENT_IMPL);
+  bool generate_nano = flavor == ProtoFlavor::NANO;
+  PrintStub(service, vars, p, ABSTRACT_CLASS, generate_nano, enable_deprecated);
+  PrintStub(service, vars, p, ASYNC_CLIENT_IMPL, generate_nano, enable_deprecated);
+  PrintStub(service, vars, p, BLOCKING_CLIENT_IMPL, generate_nano, enable_deprecated);
+  PrintStub(service, vars, p, FUTURE_CLIENT_IMPL, generate_nano, enable_deprecated);
+
+  if (enable_deprecated) {
+    PrintDeprecatedDocComment(service, vars, p);
+    PrintStub(service, vars, p, ASYNC_INTERFACE, generate_nano, true);
+    PrintDeprecatedDocComment(service, vars, p);
+    PrintStub(service, vars, p, BLOCKING_CLIENT_INTERFACE, generate_nano, true);
+    PrintDeprecatedDocComment(service, vars, p);
+    PrintStub(service, vars, p, FUTURE_CLIENT_INTERFACE, generate_nano, true);
+
+    PrintDeprecatedDocComment(service, vars, p);
+    p->Print(
+        *vars,
+        "@$Deprecated$ public static abstract class Abstract$service_name$"
+        " extends $service_name$ImplBase {}\n\n");
 
-  PrintMethodHandlerClass(service, vars, p);
+    // static bindService method
+    PrintDeprecatedDocComment(service, vars, p);
+    p->Print(
+        *vars,
+        "@$Deprecated$ public static $ServerServiceDefinition$ bindService("
+        "final $service_name$ serviceImpl) {\n");
+    (*vars)["instance"] = "serviceImpl";
+    PrintBindServiceMethodBody(service, vars, p, generate_nano);
+    p->Print(
+        *vars,
+        "}\n\n");
+  }
+  PrintMethodHandlerClass(service, vars, p, generate_nano, enable_deprecated);
   PrintGetServiceDescriptorMethod(service, vars, p, flavor);
   p->Outdent();
   p->Print("}\n");
@@ -1125,6 +1217,7 @@ void PrintImports(Printer* p) {
 void GenerateService(const ServiceDescriptor* service,
                      google::protobuf::io::ZeroCopyOutputStream* out,
                      ProtoFlavor flavor,
+                     bool enable_deprecated,
                      bool disable_version) {
   // All non-generated classes must be referred by fully qualified names to
   // avoid collision with generated classes.
@@ -1132,6 +1225,7 @@ void GenerateService(const ServiceDescriptor* service,
   vars["String"] = "java.lang.String";
   vars["Deprecated"] = "java.lang.Deprecated";
   vars["Override"] = "java.lang.Override";
+  vars["Deprecated"] = "java.lang.Deprecated";
   vars["Channel"] = "io.grpc.Channel";
   vars["CallOptions"] = "io.grpc.CallOptions";
   vars["MethodType"] = "io.grpc.MethodDescriptor.MethodType";
@@ -1171,7 +1265,7 @@ void GenerateService(const ServiceDescriptor* service,
   if (!vars["Package"].empty()) {
     vars["Package"].append(".");
   }
-  PrintService(service, &vars, &printer, flavor, disable_version);
+  PrintService(service, &vars, &printer, flavor, enable_deprecated, disable_version);
 }
 
 string ServiceJavaPackage(const FileDescriptor* file) {
diff --git a/compiler/src/java_plugin/cpp/java_generator.h b/compiler/src/java_plugin/cpp/java_generator.h
index 7e2c1a8fe..05848d9d6 100644
--- a/compiler/src/java_plugin/cpp/java_generator.h
+++ b/compiler/src/java_plugin/cpp/java_generator.h
@@ -50,6 +50,7 @@ string ServiceClassName(const google::protobuf::ServiceDescriptor* service);
 void GenerateService(const google::protobuf::ServiceDescriptor* service,
                      google::protobuf::io::ZeroCopyOutputStream* out,
                      ProtoFlavor flavor,
+                     bool enable_deprecated,
                      bool disable_version);
 
 }  // namespace java_grpc_generator
diff --git a/compiler/src/java_plugin/cpp/java_plugin.cpp b/compiler/src/java_plugin/cpp/java_plugin.cpp
index fff219177..7748c811f 100644
--- a/compiler/src/java_plugin/cpp/java_plugin.cpp
+++ b/compiler/src/java_plugin/cpp/java_plugin.cpp
@@ -37,10 +37,13 @@ class JavaGrpcGenerator : public google::protobuf::compiler::CodeGenerator {
     java_grpc_generator::ProtoFlavor flavor =
         java_grpc_generator::ProtoFlavor::NORMAL;
 
+    bool enable_deprecated = false;
     bool disable_version = false;
     for (size_t i = 0; i < options.size(); i++) {
       if (options[i].first == "lite") {
         flavor = java_grpc_generator::ProtoFlavor::LITE;
+      } else if (options[i].first == "enable_deprecated") {
+        enable_deprecated = options[i].second == "true";
       } else if (options[i].first == "noversion") {
         disable_version = true;
       }
@@ -55,7 +58,7 @@ class JavaGrpcGenerator : public google::protobuf::compiler::CodeGenerator {
       std::unique_ptr<google::protobuf::io::ZeroCopyOutputStream> output(
           context->Open(filename));
       java_grpc_generator::GenerateService(
-          service, output.get(), flavor, disable_version);
+          service, output.get(), flavor, enable_deprecated, disable_version);
     }
     return true;
   }
diff --git a/examples/build.gradle b/examples/build.gradle
index 3a86de208..6d189417d 100644
--- a/examples/build.gradle
+++ b/examples/build.gradle
@@ -46,7 +46,13 @@ protobuf {
         grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
     }
     generateProtoTasks {
-        all()*.plugins { grpc {} }
+        all()*.plugins {
+            grpc {
+                // To generate deprecated interfaces and static bindService method,
+                // turn the enable_deprecated option to true below:
+                option 'enable_deprecated=false'
+            }
+        }
     }
 }
 
@@ -65,59 +71,59 @@ startScripts.enabled = false
 task routeGuideServer(type: CreateStartScripts) {
     mainClassName = 'io.grpc.examples.routeguide.RouteGuideServer'
     applicationName = 'route-guide-server'
-    outputDir = new File(project.buildDir, 'tmp')
-    classpath = startScripts.classpath
-}
+        outputDir = new File(project.buildDir, 'tmp')
+        classpath = startScripts.classpath
+    }
 
-task routeGuideClient(type: CreateStartScripts) {
-    mainClassName = 'io.grpc.examples.routeguide.RouteGuideClient'
-    applicationName = 'route-guide-client'
-    outputDir = new File(project.buildDir, 'tmp')
-    classpath = startScripts.classpath
-}
+    task routeGuideClient(type: CreateStartScripts) {
+        mainClassName = 'io.grpc.examples.routeguide.RouteGuideClient'
+        applicationName = 'route-guide-client'
+        outputDir = new File(project.buildDir, 'tmp')
+        classpath = startScripts.classpath
+    }
 
-task helloWorldServer(type: CreateStartScripts) {
-    mainClassName = 'io.grpc.examples.helloworld.HelloWorldServer'
-    applicationName = 'hello-world-server'
-    outputDir = new File(project.buildDir, 'tmp')
-    classpath = startScripts.classpath
-}
+    task helloWorldServer(type: CreateStartScripts) {
+        mainClassName = 'io.grpc.examples.helloworld.HelloWorldServer'
+        applicationName = 'hello-world-server'
+        outputDir = new File(project.buildDir, 'tmp')
+        classpath = startScripts.classpath
+    }
 
-task helloWorldClient(type: CreateStartScripts) {
-    mainClassName = 'io.grpc.examples.helloworld.HelloWorldClient'
-    applicationName = 'hello-world-client'
-    outputDir = new File(project.buildDir, 'tmp')
-    classpath = startScripts.classpath
-}
+    task helloWorldClient(type: CreateStartScripts) {
+        mainClassName = 'io.grpc.examples.helloworld.HelloWorldClient'
+        applicationName = 'hello-world-client'
+        outputDir = new File(project.buildDir, 'tmp')
+        classpath = startScripts.classpath
+    }
 
-task hedgingHelloWorldServer(type: CreateStartScripts) {
-    mainClassName = 'io.grpc.examples.hedging.HedgingHelloWorldServer'
-    applicationName = 'hedging-hello-world-server'
-    outputDir = new File(project.buildDir, 'tmp')
-    classpath = startScripts.classpath
-}
+    task hedgingHelloWorldServer(type: CreateStartScripts) {
+        mainClassName = 'io.grpc.examples.hedging.HedgingHelloWorldServer'
+        applicationName = 'hedging-hello-world-server'
+        outputDir = new File(project.buildDir, 'tmp')
+        classpath = startScripts.classpath
+    }
 
-task hedgingHelloWorldClient(type: CreateStartScripts) {
-    mainClassName = 'io.grpc.examples.hedging.HedgingHelloWorldClient'
-    applicationName = 'hedging-hello-world-client'
-    outputDir = new File(project.buildDir, 'tmp')
-    classpath = startScripts.classpath
-}
+    task hedgingHelloWorldClient(type: CreateStartScripts) {
+        mainClassName = 'io.grpc.examples.hedging.HedgingHelloWorldClient'
+        applicationName = 'hedging-hello-world-client'
+        outputDir = new File(project.buildDir, 'tmp')
+        classpath = startScripts.classpath
+    }
 
-task compressingHelloWorldClient(type: CreateStartScripts) {
-    mainClassName = 'io.grpc.examples.experimental.CompressingHelloWorldClient'
-    applicationName = 'compressing-hello-world-client'
-    outputDir = new File(project.buildDir, 'tmp')
-    classpath = startScripts.classpath
-}
+    task compressingHelloWorldClient(type: CreateStartScripts) {
+        mainClassName = 'io.grpc.examples.experimental.CompressingHelloWorldClient'
+        applicationName = 'compressing-hello-world-client'
+        outputDir = new File(project.buildDir, 'tmp')
+        classpath = startScripts.classpath
+    }
 
-applicationDistribution.into('bin') {
-    from(routeGuideServer)
-    from(routeGuideClient)
-    from(helloWorldServer)
-    from(helloWorldClient)
-    from(hedgingHelloWorldClient)
-    from(hedgingHelloWorldServer)
-    from(compressingHelloWorldClient)
-    fileMode = 0755
-}
+    applicationDistribution.into('bin') {
+        from(routeGuideServer)
+        from(routeGuideClient)
+        from(helloWorldServer)
+        from(helloWorldClient)
+        from(hedgingHelloWorldClient)
+        from(hedgingHelloWorldServer)
+        from(compressingHelloWorldClient)
+        fileMode = 0755
+    }
-- 
2.17.0

